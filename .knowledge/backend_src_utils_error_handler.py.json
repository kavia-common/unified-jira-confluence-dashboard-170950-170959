{"is_source_file": true, "format": "Python", "description": "This file provides utility functions and classes for centralized error handling in a FastAPI-based backend. It defines methods for converting service-specific errors into HTTP exceptions, creating standardized error and success responses, logging errors, and handling validation errors. The focus is on managing errors arising from Jira and Confluence service interactions.", "external_files": ["src.services.jira_service", "src.services.confluence_service"], "external_methods": ["JiraServiceError", "ConfluenceServiceError"], "published": ["APIErrorHandler", "log_api_error", "handle_validation_error"], "classes": [{"name": "APIErrorHandler", "description": "A class encapsulating static methods for handling API errors, converting exceptions to HTTP responses, and creating standardized response objects."}], "methods": [{"name": "HTTPException handle_service_error(error: Exception, service_name: str = \"API\")", "description": "Converts service-specific exceptions into appropriate HTTPException responses based on error content.", "scope": "APIErrorHandler", "scopeKind": "class"}, {"name": "Dict[str,Any] create_error_response( error_code: str, message: str, details: Optional[Dict[str, Any]] = None )", "description": "Generates a standardized error message structure for API responses.", "scope": "APIErrorHandler", "scopeKind": "class"}, {"name": "Dict[str,Any] create_success_response( data: Any, message: Optional[str] = None, meta: Optional[Dict[str, Any]] = None )", "description": "Creates a standardized success response structure including data, optional message, and meta information.", "scope": "APIErrorHandler", "scopeKind": "class"}, {"name": "HTTPException handle_validation_error(error: Exception)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "log_api_error(endpoint: str, error: Exception, user_id: Optional[str] = None)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["logger.warning", "logger.error", "logger.warning", "logger.error", "logger.error"], "search-terms": ["Error handling", "APIException", "FastAPI", "JiraServiceError", "ConfluenceServiceError", "HTTPException", "standardized responses"], "state": 2, "file_id": 22, "knowledge_revision": 49, "git_revision": "", "ctags": [{"_type": "tag", "name": "APIErrorHandler", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^class APIErrorHandler:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "create_error_response", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^    def create_error_response($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "( error_code: str, message: str, details: Optional[Dict[str, Any]] = None )", "scope": "APIErrorHandler", "scopeKind": "class"}, {"_type": "tag", "name": "create_success_response", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^    def create_success_response($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "( data: Any, message: Optional[str] = None, meta: Optional[Dict[str, Any]] = None )", "scope": "APIErrorHandler", "scopeKind": "class"}, {"_type": "tag", "name": "handle_service_error", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^    def handle_service_error(error: Exception, service_name: str = \"API\") -> HTTPException:$/", "language": "Python", "typeref": "typename:HTTPException", "kind": "member", "signature": "(error: Exception, service_name: str = \"API\")", "scope": "APIErrorHandler", "scopeKind": "class"}, {"_type": "tag", "name": "handle_validation_error", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^def handle_validation_error(error: Exception) -> HTTPException:$/", "language": "Python", "typeref": "typename:HTTPException", "kind": "function", "signature": "(error: Exception)"}, {"_type": "tag", "name": "log_api_error", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^def log_api_error(endpoint: str, error: Exception, user_id: Optional[str] = None):$/", "language": "Python", "kind": "function", "signature": "(endpoint: str, error: Exception, user_id: Optional[str] = None)"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170959/backend/src/utils/error_handler.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}], "hash": "6754fbbc3bfd0ec05edb8288f52b5372", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/utils/error_handler.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"49": ""}]}